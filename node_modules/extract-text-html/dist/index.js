"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractText = exports.defaultExcludeContentFromTags = void 0;
const htmlparser2 = __importStar(require("htmlparser2"));
// Exclude content from metadata tags.
// https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#metadata_content
exports.defaultExcludeContentFromTags = [
    'head',
    'base',
    'link',
    'meta',
    'noscript',
    'script',
    'style',
    'title',
];
/**
 * Extract text from HTML. Excludes content from metadata tags by default.
 * For example, script and style. Removes excess whitespace by default.
 */
const extractText = (html, options = {}) => {
    // Options
    const excludeTags = options.excludeContentFromTags ?? exports.defaultExcludeContentFromTags;
    const trimWhitespace = options.trimWhitespace ?? true;
    let excludeText = false;
    let strippedText = '';
    const shouldExclude = (name) => excludeTags.includes(name);
    const parser = new htmlparser2.Parser({
        onopentagname(name) {
            if (shouldExclude(name)) {
                excludeText = true;
            }
        },
        ontext(text) {
            if (!excludeText) {
                strippedText += text;
            }
        },
        onclosetag(name) {
            if (shouldExclude(name)) {
                excludeText = false;
            }
        },
    });
    parser.write(html);
    parser.end();
    // Remove excess whitespace if needed
    return trimWhitespace
        ? strippedText.replace(/\s+/g, ' ').trim()
        : strippedText;
};
exports.extractText = extractText;
