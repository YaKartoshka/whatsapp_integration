import { DocumentInitParameters, PDFDataRangeTransport, TextItem, TypedArray } from 'pdfjs-dist/types/src/display/api';
export declare type Page = {
    lines: string[];
};
export declare type ProgressData = {
    loaded: number;
    total: number;
};
/**
 * Read a pdf file and convert it into lines of text.
 *
 * If a URL is used to fetch the PDF data a standard XMLHttpRequest(XHR) is used, which means it
 * must follow the same origin rules that any XHR does e.g. No cross domain requests without CORS.
 *
 * Parameter documentation copied from getDocument's documentation in
 * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/pdfjs-dist/index.d.ts
 *
 * @param source Url or path as a string or other data types as seen in type below
 * @param pdfDataRangeTransport Used if you want to manually server range requests for data in the
 *   PDF. @ee viewer.js for an example of pdfDataRangeTransport's interface.
 * @param passwordCallback Used to request a password if wrong or no password was provided. The
 *   callback receives two parameters: function that needs to be called with new password and the reason.
 * @param progressCallback Progress callback.
 * @param concatIntoSingleString If set to true, all of the PDFs pages are concatenated into a
 *   single string and that is returned.
 * @returns A promise that is resolved with an array of each page's text content
 */
export declare function readPdfText(source: string | URL | TypedArray | PDFDataRangeTransport | DocumentInitParameters, concatIntoSingleString: true, passwordCallback?: (fn: (password: string) => void, reason: string) => string, progressCallback?: (progressData: ProgressData) => void): Promise<string>;
export declare function readPdfText(source: string | URL | TypedArray | PDFDataRangeTransport | DocumentInitParameters, concatIntoSingleString?: false | undefined, passwordCallback?: (fn: (password: string) => void, reason: string) => string, progressCallback?: (progressData: ProgressData) => void): Promise<Page[]>;
/**
 * Parses individual text items generated by pdf.js This allows lower level control of what actually
 * gets parsed. For example, a consumer of this function may remove entire sections of the pdf text
 * prior to passing items in here. See parsePage function above for example usage.
 *
 * @param pdfItems An array of TextItem items.
 */
export declare function parsePageItems(pdfItems: TextItem[]): Page;
