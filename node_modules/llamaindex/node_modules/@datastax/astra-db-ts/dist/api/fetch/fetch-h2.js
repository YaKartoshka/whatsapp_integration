"use strict";
// Copyright DataStax, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// noinspection ExceptionCaughtLocallyJS
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchH2 = void 0;
const errors_1 = require("../../client/errors");
class FetchH2 {
    constructor(options, preferHttp2) {
        Object.defineProperty(this, "_http1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_preferred", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_timeoutErrorCls", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        try {
            // Complicated expression to stop Next.js and such from tracing require and trying to load the fetch-h2 client
            const [indirectRequire] = [require].map(x => Math.random() > 10 ? null : x);
            const fetchH2 = (options?.fetchH2 ?? indirectRequire('fetch-h2'));
            this._http1 = fetchH2.context({
                http1: {
                    keepAlive: options?.http1?.keepAlive,
                    keepAliveMsecs: options?.http1?.keepAliveMS,
                    maxSockets: options?.http1?.maxSockets,
                    maxFreeSockets: options?.http1?.maxFreeSockets,
                },
                httpsProtocols: ['http1'],
            });
            this._preferred = (preferHttp2)
                ? fetchH2.context()
                : this._http1;
            this._timeoutErrorCls = fetchH2.TimeoutError;
        }
        catch (e) {
            throw new errors_1.FailedToLoadDefaultClientError(e);
        }
    }
    async fetch(info) {
        const init = info;
        try {
            const resp = (info.forceHttp1)
                ? await this._http1.fetch(info.url, init)
                : await this._preferred.fetch(info.url, init);
            return {
                headers: Object.fromEntries(resp.headers.entries()),
                body: await resp.text(),
                status: resp.status,
                url: resp.url,
                httpVersion: resp.httpVersion,
                statusText: resp.statusText,
            };
        }
        catch (e) {
            if (e instanceof this._timeoutErrorCls) {
                throw info.mkTimeoutError();
            }
            throw e;
        }
    }
    async close() {
        await this._preferred.disconnectAll();
        await this._http1.disconnectAll();
    }
}
exports.FetchH2 = FetchH2;
//# sourceMappingURL=fetch-h2.js.map